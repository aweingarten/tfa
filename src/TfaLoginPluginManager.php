<?php

namespace Drupal\tfa;

use Drupal\Core\Cache\CacheBackendInterface;
use Drupal\Core\Extension\ModuleHandlerInterface;
use Drupal\Core\Plugin\DefaultPluginManager;

/**
 *
 */
class TfaLoginPluginManager extends DefaultPluginManager {

  protected $tfaSettings;

  /**
   * Constructs a new TfaLogin plugin manager.
   *
   * @param \Traversable $namespaces
   *   An object that implements \Traversable which contains the root paths
   *   keyed by the corresponding namespace to look for plugin implementations.
   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
   *   Cache backend instance to use.
   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
   *   The module handler.
   */
  public function __construct(\Traversable $namespaces, CacheBackendInterface $cache_backend, ModuleHandlerInterface $module_handler) {
    parent::__construct('Plugin/TfaLogin', $namespaces, $module_handler, 'Drupal\tfa\Plugin\TfaLoginInterface', 'Drupal\tfa\Annotation\TfaLogin');
    $this->alterInfo('tfa_login_info');
    $this->setCacheBackend($cache_backend, 'tfa_login');
    $this->tfaSettings = \Drupal::config('tfa.settings');
  }

  /**
   * Create an instance of a plugin.
   *
   * @param string $plugin_id
   * @param array $configuration
   *
   * @return object
   */
  public function createInstance($plugin_id, array $configuration = array()) {
    // TODO: Change the autogenerated stub.
    return parent::createInstance($plugin_id, $configuration);
  }

  /**
   * Returns an array of enabled login plugins.
   *
   * @param array $configuration
   *
   * @return array|null
   */
  public function getPlugins($configuration = array()) {
    $plugin_ids = $this->tfaSettings->get('login_plugins');
    $plugins = array();
    if (!empty($plugin_ids)) {
      foreach ($plugin_ids as $plugin_id) {
        $plugins[$plugin_id] = $this->createInstance($plugin_id, $configuration);
      }
      return $plugins;
    }
    return NULL;
  }

}
